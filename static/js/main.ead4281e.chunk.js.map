{"version":3,"sources":["components/SelectForm.jsx","components/Form.jsx","store/serviceModalActive.js","store/serviceTable.js","components/Row.jsx","components/RowEmpty.jsx","components/TableBtns.jsx","components/Table.jsx","hooks/useInput.js","hooks/useValidation.js","components/Modal.jsx","components/TableGenerator.jsx","App.js","index.js"],"names":["SelectForm","props","useState","selectActive","setSelectActive","selectOption","e","city","changeValue","target","textContent","className","onClick","value","isDirty","error","Form","disabled","name","isValid","surname","age","onSubmit","onPaste","onChange","onBlur","type","placeholder","submitName","active","rowInfo","typeTable","tableId","rowId","makeAutoObservable","this","sourceTable","id","rows","newTables","row","push","editedRow","forEach","rowInd","table","tableInd","removeRowId","i","splice","length","removeTableId","Row","observer","href","serviceModalActive","makeActive","serviceTable","removeSourceRow","removeNewRow","RowEmpty","TableBtns","copySourceTable","current","alert","copyNewTable","infoTable","removeTable","Table","map","useInput","initialValue","validations","setValue","setDirty","valid","isEmpty","setEmpty","minLengthError","setMinLengthError","maxLengthError","setMaxLengthError","setValid","useEffect","validation","inputName","useValidation","val","test","Modal","update","useRef","minLength","maxLength","inputSurname","inputAge","inputCity","makeInactive","stopPropagation","event","preventDefault","editRowSourceTable","editRowNewTable","TableGenerator","handleSubmit","addRow","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ead4281e.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nconst SelectForm = (props) => {\r\n    const [selectActive, setSelectActive] = useState(false)\r\n\r\n    const toggleActive = () => {\r\n        setSelectActive(!selectActive)\r\n    }\r\n    const selectOption = (e) => {\r\n        props.city.changeValue(e.target.textContent)\r\n    }\r\n\r\n    return (\r\n        <div className={(selectActive) ? \"form__select select select_active\" : 'form__select select'} onClick={toggleActive}>\r\n            <div className=\"select__value\" >{(props.city.value) ? props.city.value : 'City'}</div>\r\n            <div className=\"select__list\">\r\n                <div className=\"select__option\" onClick={selectOption}>Riga</div>\r\n                <div className=\"select__option\" onClick={selectOption}>Daugavpils</div>\r\n                <div className=\"select__option\" onClick={selectOption}>Jūrmala</div>\r\n                <div className=\"select__option\" onClick={selectOption}>Ventspils</div>\r\n            </div>\r\n            {(props.city.isDirty && props.city.error) && <label className='label-error'>{props.city.error}</label>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SelectForm;\r\n","import React from 'react';\r\nimport SelectForm from \"./SelectForm\";\r\n\r\n\r\nconst Form = (props) => {\r\n    const disabled = (!props.name.isValid || !props.surname.isValid || !props.age.isValid || !props.city.isValid);\r\n\r\n    return (\r\n        <form className='form' onSubmit={props.onSubmit}>\r\n            <div className='form__group'>\r\n                <input className='form__input' onPaste={props.name.onChange} value={props.name.value} onChange={props.name.onChange} onBlur={props.name.onBlur} type=\"text\" name=\"name\" placeholder=\"Name\"/>\r\n                {(props.name.isDirty && props.name.error) && <label className='label-error'>{props.name.error}</label>}\r\n            </div>\r\n            <div className='form__group'>\r\n                <input className='form__input'  value={props.surname.value} onChange={props.surname.onChange} onBlur={props.surname.onBlur} type=\"text\" name=\"surname\" placeholder=\"Surname\"/>\r\n                {(props.surname.isDirty && props.surname.error) && <label className='label-error'>{props.surname.error}</label>}\r\n            </div>\r\n            <div className='form__group'>\r\n                <input className='form__input'  value={props.age.value} onChange={props.age.onChange} onBlur={props.age.onBlur} type=\"text\" name=\"age\" placeholder=\"Age\"/>\r\n                {(props.age.isDirty && props.age.error) && <label className='label-error'>{props.age.error}</label>}\r\n            </div>\r\n            <div className='form__group'>\r\n                <SelectForm city={props.city}/>\r\n            </div>\r\n            <button disabled={disabled} className='form__button button button_font-weight_bold' type='submit'>{props.submitName}</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Form;\r\n","import {makeAutoObservable} from \"mobx\";\r\n\r\nclass ServiceModalActive {\r\n    active = false;\r\n    rowInfo = {\r\n        typeTable: '',\r\n        tableId: '',\r\n        rowId: ''\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    makeActive (tableId,rowId,typeTable) {\r\n        this.active = true;\r\n        this.rowInfo.typeTable = typeTable;\r\n        this.rowInfo.tableId = tableId;\r\n        this.rowInfo.rowId = rowId;\r\n    }\r\n\r\n    makeInactive () {\r\n        this.active = false;\r\n    }\r\n}\r\n\r\nexport default new ServiceModalActive();\r\n","import {action, makeAutoObservable, makeObservable, observable} from \"mobx\";\r\n\r\nclass ServiceTable {\r\n    sourceTable = {\r\n        id: 1,\r\n        rows: []\r\n    }\r\n    newTables = [\r\n        // {\r\n        //     id: 1,\r\n        //     rows: []\r\n        // }\r\n    ]\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        // makeObservable(this, {\r\n        //     sourceTable: observable,\r\n        //     newTables: observable,\r\n        //     addRow: action.bound,\r\n        //     editRow: action.bound,\r\n        //     removeRow: action.bound,\r\n        //     copyTable: action.bound,\r\n        //     removeTable: action\r\n        // }, {\r\n        //     deep: true\r\n        // });\r\n    }\r\n\r\n    addRow (row) {\r\n        this.sourceTable.rows.push(row);\r\n    }\r\n\r\n    editRowSourceTable (tableId, editedRow) {\r\n        this.sourceTable.rows.forEach((row,rowInd) => {\r\n            if (row.id === editedRow.id) {\r\n                this.sourceTable.rows[rowInd] = {...editedRow};\r\n            }\r\n        });\r\n    }\r\n\r\n    editRowNewTable (tableId, editedRow) {\r\n        this.newTables.forEach((table, tableInd) => {\r\n            if (table.id === tableId) {\r\n                table.rows.forEach((row,rowInd) => {\r\n                    if (row.id === editedRow.id) {\r\n                        this.newTables[tableInd].rows[rowInd] = {...editedRow};\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    removeSourceRow (removeRowId) {\r\n        this.sourceTable.rows.forEach((row,i) => {\r\n            if (row.id === removeRowId) {\r\n                this.sourceTable.rows.splice(i,1)\r\n            }\r\n        });\r\n    }\r\n\r\n    removeNewRow (tableId, removeRowId) {\r\n        this.newTables.forEach((table, tableInd) => {\r\n            if (table.id === tableId) {\r\n                table.rows.forEach((row,rowInd) => {\r\n                    if (row.id === removeRowId) {\r\n                        this.newTables[tableInd].rows.splice(rowInd,1)\r\n                    }\r\n                });\r\n                if (!table.rows.length) {\r\n                    this.newTables.splice(tableInd,1)\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    copySourceTable() {\r\n        this.newTables.push({...this.sourceTable})\r\n        this.sourceTable.id++\r\n        this.sourceTable.rows = [];\r\n    }\r\n\r\n    copyNewTable(table) {\r\n        this.newTables.push({...table, id: this.sourceTable.id})\r\n        this.sourceTable.id++\r\n    }\r\n\r\n    removeTable(removeTableId) {\r\n        this.newTables.forEach((table,i) => {\r\n            if (table.id === removeTableId) {\r\n                this.newTables.splice(i,1)\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default new ServiceTable();\r\n","import React from 'react';\r\nimport {observer} from \"mobx-react-lite\";\r\nimport serviceModalActive from \"../store/serviceModalActive\";\r\nimport serviceTable from \"../store/serviceTable\";\r\n\r\nconst Row = observer( (props) => {\r\n    const hendlerModalActive = () => {\r\n        serviceModalActive.makeActive(props.tableId, props.row.id, props.typeTable);\r\n    }\r\n    const hendlerRemoveRow = () => {\r\n        if (props.typeTable === 'sourceTable') {\r\n            serviceTable.removeSourceRow(props.row.id);\r\n        } else if (props.typeTable === 'newTable')  {\r\n            serviceTable.removeNewRow(props.tableId, props.row.id);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <tr className='table__row'>\r\n            <td className='table__td'>{props.row.name}</td>\r\n            <td className='table__td'>{props.row.surname}</td>\r\n            <td className='table__td'>{props.row.age}</td>\r\n            <td className='table__td'>{props.row.city}</td>\r\n            <td className='table__td'>\r\n                <div className='table__cell-btns'>\r\n                    <a href='#' className='table__row-edit' onClick={hendlerModalActive}>Edit</a>\r\n                    <a href='#' className='table__row-del' onClick={hendlerRemoveRow}>Delete</a>\r\n                </div>\r\n            </td>\r\n        </tr>\r\n    );\r\n});\r\n\r\nexport default Row;\r\n","import React from 'react';\r\n\r\nconst RowEmpty = () => {\r\n    return (\r\n        <tr className='table__row table__row_font_italic'>\r\n            <td className='table__td'>Name</td>\r\n            <td className='table__td'>Surname</td>\r\n            <td className='table__td'>Age</td>\r\n            <td className='table__td'>City</td>\r\n            <td className='table__td'></td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default RowEmpty;\r\n","import React from 'react';\r\nimport serviceTable from \"../store/serviceTable\";\r\nimport {observer} from \"mobx-react-lite\";\r\n\r\nconst TableBtns = observer( (props) => {\r\n    const copyTabel = () => {\r\n        if (props.typeTable === 'sourceTable') {\r\n            if (serviceTable.sourceTable.rows.length) {\r\n                serviceTable.copySourceTable()\r\n                props.rowId.current = 1\r\n            } else {\r\n                alert('Таблица не должна быть пустой!')\r\n            }\r\n        } else if (props.typeTable === 'newTable')  {\r\n            serviceTable.copyNewTable(props.infoTable)\r\n        }\r\n    }\r\n    const removeTabel = () => {\r\n        if (props.typeTable === 'sourceTable') {\r\n            alert('Исходная таблица не может быть удалена')\r\n        } else if (props.typeTable === 'newTable')  {\r\n            serviceTable.removeTable(props.infoTable.id)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"table-btns\">\r\n            <button className='table-btns__copy-table button' onClick={copyTabel}>Copy table</button>\r\n            <button className='table-btns__cross cross' onClick={removeTabel}></button>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default TableBtns;\r\n","import React from 'react';\r\nimport Row from \"./Row\";\r\nimport RowEmpty from \"./RowEmpty\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport TableBtns from \"./TableBtns\";\r\n\r\nconst Table = observer((props) => {\r\n    const rows = props.infoTable.rows;\r\n    return (\r\n        <div className=\"table-wrap\">\r\n            <TableBtns typeTable={props.typeTable} rowId={props.rowId} infoTable={props.infoTable}/>\r\n\r\n            <table className='table'>\r\n                <thead>\r\n                    <tr className='table__row-header'>\r\n                        <th className='table__th'>Name</th>\r\n                        <th className='table__th'>Surname</th>\r\n                        <th className='table__th'>Age</th>\r\n                        <th className='table__th'>City</th>\r\n                        <th className='table__th'></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        (rows.length > 0) ? rows.map(row => {\r\n                            return <Row key={row.id} row={row} typeTable={props.typeTable} tableId={props.infoTable.id}/>\r\n                        }) : <RowEmpty />\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Table;\r\n","import {useState} from 'react';\r\nimport {useValidation} from \"./useValidation\";\r\n\r\nexport const useInput = (initialValue, validations) => {\r\n    const [value, setValue] = useState(initialValue)\r\n    const [isDirty, setDirty] = useState(false)\r\n    const valid = useValidation(value, validations);\r\n\r\n    const onChange = (e) => {\r\n        if (validations?.inputName === 'age') {\r\n            const regexp = (/\\D/g);\r\n            if (!regexp.test(e.target.value)) {\r\n                setValue(e.target.value)\r\n            }\r\n        } else {\r\n            setValue(e.target.value)\r\n        }\r\n    }\r\n\r\n    const onBlur = () => {\r\n        setDirty(true)\r\n    }\r\n\r\n    const changeValue = val => {\r\n        setValue(val)\r\n        setDirty(false)\r\n    }\r\n\r\n    return {\r\n        value,\r\n        changeValue,\r\n        isDirty,\r\n        onChange,\r\n        onBlur,\r\n        ...valid\r\n    }\r\n}\r\n","import {useEffect, useState} from 'react';\r\n\r\nexport const useValidation = (value, validations) => {\r\n    let error;\r\n    const [isEmpty, setEmpty] = useState(false);\r\n    const [minLengthError, setMinLengthError] = useState(false);\r\n    const [maxLengthError, setMaxLengthError] = useState(false);\r\n    const [isValid, setValid] = useState(false);\r\n\r\n    useEffect(() => {\r\n        for (let validation in validations) {\r\n            switch (validation) {\r\n                case 'isEmpty':\r\n                    value ? setEmpty(false) : setEmpty(true)\r\n                    break\r\n                case 'minLength':\r\n                    (value.length >= validations[validation]) ? setMinLengthError(false) : setMinLengthError(true)\r\n                    break\r\n                case 'maxLength':\r\n                    (value.length <= validations[validation]) ? setMaxLengthError(false) : setMaxLengthError(true)\r\n                    break\r\n            }\r\n        }\r\n    },[value])\r\n\r\n    if (isEmpty) {\r\n        if (validations?.inputName === 'city') {\r\n            error = `Выберите город`\r\n        } else {\r\n            error = 'Поле не может быть пустым'\r\n        }\r\n    } else if (minLengthError) {\r\n        if (validations?.inputName === 'name') {\r\n            error = `Имя должно содержать минимум ${validations['minLength']} символов`\r\n        } else if (validations?.inputName === 'surname') {\r\n            error = `Фамилия должна содержать минимум ${validations['minLength']} символов`\r\n        } else if (validations?.inputName === 'age') {\r\n            error = `Возраст должен содержать минимум ${validations['minLength']} цифр`\r\n        } else {\r\n            error = `Должно быть не менее ${validations['minLength']} символов`\r\n        }\r\n    } else if (maxLengthError) {\r\n        if (validations?.inputName === 'name') {\r\n            error = `Имя должно содержать максимум ${validations['minLength']} символов`\r\n        } else if (validations?.inputName === 'surname') {\r\n            error = `Фамилия должна содержать максимум ${validations['minLength']} символов`\r\n        } else if (validations?.inputName === 'age') {\r\n            error = `Возраст должен содержать максимум ${validations['minLength']} цифр`\r\n        } else {\r\n            error = `Должно быть не более ${validations['maxLength']} символов`\r\n        }\r\n    } else {\r\n        error = ''\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if (isEmpty || minLengthError || maxLengthError) {\r\n            setValid(false)\r\n        } else {\r\n            setValid(true)\r\n        }\r\n    },[isEmpty, minLengthError, maxLengthError])\r\n\r\n    return {\r\n        isValid,\r\n        error\r\n    };\r\n}\r\n","import React, {useRef} from 'react';\r\nimport Form from \"./Form\";\r\nimport serviceModalActive from \"../store/serviceModalActive\";\r\nimport serviceTable from \"../store/serviceTable\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {useInput} from \"../hooks/useInput\";\r\n\r\nconst Modal = observer((props) => {\r\n\r\n    const update = useRef(true)\r\n\r\n    const rowInfo = serviceModalActive.rowInfo;\r\n\r\n    const inputName = useInput('', {isEmpty: true, minLength: 3, maxLength: 15, inputName: 'name'})\r\n    const inputSurname = useInput('', {isEmpty: true, minLength: 3, maxLength: 15, inputName: 'surname'})\r\n    const inputAge = useInput('', {isEmpty: true, maxLength: 30, inputName: 'age'})\r\n    const inputCity = useInput('', {isEmpty: true, inputName: 'city'})\r\n\r\n    if (update.current) {\r\n        if (rowInfo.typeTable === 'sourceTable') {\r\n            serviceTable.sourceTable.rows.forEach((row) => {\r\n                if (row.id === rowInfo.rowId) {\r\n                    inputName.changeValue(row.name)\r\n                    inputSurname.changeValue(row.surname)\r\n                    inputAge.changeValue(row.age)\r\n                    inputCity.changeValue(row.city)\r\n                    update.current = false\r\n                }\r\n            });\r\n\r\n        } else if (rowInfo.typeTable === 'newTable') {\r\n            serviceTable.newTables.forEach((table) => {\r\n                if (table.id === rowInfo.tableId) {\r\n                    table.rows.forEach((row) => {\r\n                        if (row.id === rowInfo.rowId) {\r\n                            inputName.changeValue(row.name)\r\n                            inputSurname.changeValue(row.surname)\r\n                            inputAge.changeValue(row.age)\r\n                            inputCity.changeValue(row.city)\r\n                            update.current = false\r\n                        }\r\n                    });\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    const hendlerModalInactive = () => {\r\n        serviceModalActive.makeInactive();\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n\r\n        const editedRow = {\r\n            id: rowInfo.rowId,\r\n            name: inputName.value,\r\n            surname: inputSurname.value,\r\n            age: inputAge.value,\r\n            city: inputCity.value\r\n        }\r\n        if (rowInfo.typeTable === 'sourceTable') {\r\n            serviceTable.editRowSourceTable(rowInfo.tableId, editedRow)\r\n            serviceModalActive.makeInactive()\r\n        } else if (rowInfo.typeTable === 'newTable') {\r\n            serviceTable.editRowNewTable(rowInfo.tableId, editedRow)\r\n            serviceModalActive.makeInactive()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={serviceModalActive.active ? 'modal modal_active' : 'modal'} onClick={hendlerModalInactive}>\r\n            <div  className={serviceModalActive.active ? 'modal__content modal__content_active' : 'modal__content'} onClick={(e) => {e.stopPropagation()}}>\r\n                <Form name={inputName} surname={inputSurname} age={inputAge} city={inputCity} onSubmit={handleSubmit} submitName='EDIT'/>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Modal;\r\n","import React, {useRef} from 'react';\r\nimport Form from \"./Form\";\r\nimport Table from \"./Table\";\r\nimport serviceTable from \"../store/serviceTable\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {useInput} from \"../hooks/useInput\";\r\nimport Modal from \"./Modal\";\r\n\r\nconst TableGenerator = observer(() => {\r\n    const rowId = useRef(1)\r\n\r\n    const inputName = useInput('', {isEmpty: true, minLength: 3, maxLength: 15, inputName: 'name'})\r\n    const inputSurname = useInput('', {isEmpty: true, minLength: 3, maxLength: 15, inputName: 'surname'})\r\n    const inputAge = useInput('', {isEmpty: true, maxLength: 30, inputName: 'age'})\r\n    const inputCity = useInput('', {isEmpty: true, inputName: 'city'})\r\n\r\n    const handleSubmit = (event) => {\r\n        const row = {\r\n            id: rowId.current,\r\n            name: inputName.value,\r\n            surname: inputSurname.value,\r\n            age: inputAge.value,\r\n            city: inputCity.value\r\n        }\r\n        serviceTable.addRow(row)\r\n        rowId.current++\r\n\r\n        inputName.changeValue('')\r\n        inputSurname.changeValue('')\r\n        inputAge.changeValue('')\r\n        inputCity.changeValue('')\r\n\r\n        event.preventDefault()\r\n    }\r\n\r\n    return (\r\n        <div className='wrap'>\r\n            <Modal />\r\n            <div className=\"wrap-forms\">\r\n                <Form name={inputName} surname={inputSurname} age={inputAge} city={inputCity} onSubmit={handleSubmit} submitName='ADD'/>\r\n                <Form name={inputName} surname={inputSurname} age={inputAge} city={inputCity} onSubmit={handleSubmit} submitName='ADD'/>\r\n            </div>\r\n            <Table rowId={rowId} key='serviceTable' typeTable='sourceTable' infoTable={serviceTable.sourceTable} />\r\n            {\r\n                serviceTable.newTables.map(table => {\r\n                    return <Table key={table.id} infoTable={table} typeTable='newTable'/>\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default TableGenerator;\r\n","import React from \"react\";\nimport './styles/App.css'\nimport TableGenerator from \"./components/TableGenerator\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <TableGenerator/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}